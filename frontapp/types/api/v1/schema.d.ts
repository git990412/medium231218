/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/members": {
    post: operations["join"];
  };
  "/api/v1/members/logout": {
    post: operations["logout"];
  };
  "/api/v1/members/login": {
    post: operations["login"];
  };
  "/api/v1/posts": {
    get: operations["getLatest"];
  };
  "/api/v1/members/test": {
    get: operations["test"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    JoinForm: {
      username: string;
      password: string;
      passwordConfirm: string;
      email: string;
    };
    LoginForm: {
      email: string;
      password: string;
    };
    MemberDto: {
      username?: string;
      paid?: boolean;
    };
    PagePostDto: {
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["PostDto"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      pageNumber?: number;
      unpaged?: boolean;
      paged?: boolean;
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"];
    };
    PostDto: {
      /** Format: int64 */
      id?: number;
      title?: string;
      body?: string;
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      modifyDate?: string;
      /** Format: int64 */
      hit?: number;
      member?: components["schemas"]["MemberDto"];
      paid?: boolean;
      published?: boolean;
    };
    SortObject: {
      sorted?: boolean;
      unsorted?: boolean;
      empty?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  join: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JoinForm"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginForm"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
  getLatest: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["PagePostDto"];
        };
      };
    };
  };
  test: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
}
